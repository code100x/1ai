// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  credits   Int      @default(3)
  isPremium Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  executions Execution[]
  subscriptions Subscription[]
  paymentHistory PaymentHistory[]
}

model Execution {
  id String @id @default(uuid())
  title String
  type ExecutionType
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields: [userId], references: [id])
  userId String
  externalId String?
}

enum ExecutionType {
  CONVERSATION
  ARTICLE_SUMMARIZER
}

model Conversation {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  messages  Message[]
}

model App {
  id String @id @default(uuid())
  name String
  description String
  icon String
  
  conversationId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Message {
  id        String   @id @default(uuid())
  conversationId String
  content String
  role String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  conversation Conversation @relation(fields: [conversationId], references: [id])
}

model PaymentHistory {
  paymentId     String   @id @default(uuid())
  status        PaymentStatus
  paymentMethod String
  cfPaymentId   String?
  bankReference String?
  amount        Float
  currency      String
  userId        String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
}

model Subscription {
  id             String   @id @default(uuid())
  userId         String
  currency       String
  planId         String
  rzpSubscriptionId String
  startDate      DateTime
  endDate        DateTime
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}


model ArticleSummarizer {
  id String @id @default(uuid())
  article String
  summary String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}